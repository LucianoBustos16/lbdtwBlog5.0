---
import Icon from "@/components/ui/icons/Icon.astro";
import CarouselItem from "@/components/CarouselItem.astro"
// import Subtitle from "./Subtitle.astro"
import { getCollection } from 'astro:content';

const posts = await getCollection('posts')


posts.sort((a, b) => {
	const dateA = new Date(a.data.pubDate);
	const dateB = new Date(b.data.pubDate);
  return dateB.getTime() - dateA.getTime();   
});

const latesPosts =posts.slice(0,10);

const title: string = `Últimas <span class="text-primary">Noticias</span>`;
---

<section class="mx-auto max-w-[85rem] px-4 py-10 sm:px-6 lg:px-8 lg:py-14 2xl:max-w-full">

  <div class="flex items-center justify-between pb-6 md:pb-12">
    <div class="mx-auto mb-6 w-full space-y-1 text-center sm:w-1/2 lg:w-1/3">
      <h2 class="text-balance text-2xl font-bold leading-tight text-textDark dark:text-neutral-200 sm:text-3xl">
          <Fragment set:html={title}/>
      <h2/>
  </div>

    <div class="hidden md:flex items-center gap-x-4">
      <button
        class="bg-[#E2E2E5] text-[#636365] opacity-45 p-1 rounded-full enabled:hover:scale-110 transition-all enabled:active:scale-100"
        id="left-button"
        disabled="true"
        aria-label="Ir al elemento anterior"
      >
      <Icon icon="chevronLeft" size="24" />
      </button>
      <button
        class="bg-[#E2E2E5] text-[#636365] p-1 rounded-full enabled:hover:scale-110 transition-all enabled:active:scale-100"
        id="right-button"
        aria-label="Ir al siguiente elemento"
      >
      <Icon icon="chevronRight" size="24" />
      </button>
    </div>
  </div>

  <div
    class="relative carousel-container -mr-4 pr-4 md:mr-0 md:pr-0"
    id="carousel-container"
    style="--left-opacity: 0; --right-opacity: 1;"
  >
    <div
      class="flex overflow-scroll custom-scrollbar gap-x-4 md:gap-x-8 snap-mandatory snap-x -mr-4 pr-4 md:mr-0 md:pr-0"
      id="carousel"
    >
      {
        latesPosts.map((post: { slug: any; data: any; }) => {
            const { slug, data} = post
            const { title, image, author, pubDate} = data

            console.log(image)

            return(
                <CarouselItem
                  videoId={image}
                  image={image.url}
                  title={title}
                  alt={image.alt}
                  url={slug}
                  date={pubDate}
                  author={author}
                />
            )
        }
        )
      }
    </div>
  </div>
</section>

<style>

.custom-scrollbar::-webkit-scrollbar {
    display: none;
  }

  .custom-scrollbar {
    -ms-overflow-style: none;
    scrollbar-width: none;
  }

  .carousel-container:before {
    background-image: linear-gradient(to left, transparent, var(--bg-web));
    content: "";
    height: 570px;
    left: 0;
    opacity: var(--left-opacity);
    pointer-events: none;
    position: absolute;
    top: 0;
    transition: opacity cubic-bezier(0.4, 0, 0.2, 1) 150ms;
    width: 64px;
    z-index: 10;
  }

  .carousel-container:after {
    background-image: linear-gradient(to right, transparent, var(--bg-web));
    content: "";
    height: 570px;
    opacity: var(--right-opacity);
    pointer-events: none;
    position: absolute;
    right: 0;
    top: 0;
    transition: opacity cubic-bezier(0.4, 0, 0.2, 1) 150ms;
    width: 64px;
    z-index: 10;
  }

  @media (max-width: 768px) {
    .carousel-container:before {
      opacity: 0 !important;
    }

    .carousel-container:after {
      opacity: 0 !important;
    }
  }
</style>

<script>
  const rightButton = document.querySelector(
    "#right-button"
  ) as HTMLButtonElement
  const leftButton = document.querySelector("#left-button") as HTMLButtonElement
  const carousel = document.querySelector("#carousel") as HTMLDivElement
  const carouselContainer = document.querySelector(
    "#carousel-container"
  ) as HTMLDivElement

  leftButton.addEventListener("click", () => {
    carousel.scrollTo({
      left: carousel.scrollLeft - 320,
      behavior: "smooth",
    })
  })

  rightButton.addEventListener("click", () => {
    carousel.scrollTo({
      left: carousel.scrollLeft + 320,
      behavior: "smooth",
    })
  })

  carousel.addEventListener("scroll", () => {
    const tolerance = 2 // 0 + 2px to account for floating point errors

    const updateButtonState = (button: HTMLButtonElement, disable: boolean) => {
      button.classList.toggle("opacity-45", disable)
      button.disabled = disable
    }

    const updateOpacity = (property: string, value: string) => {
      carouselContainer.style.setProperty(property, value)
    }

    if (carousel.scrollLeft <= tolerance) {
      updateButtonState(leftButton, true)
    } else {
      updateButtonState(leftButton, false)
    }

    if (
      carousel.scrollLeft + carousel.clientWidth >=
      carousel.scrollWidth - tolerance
    ) {
      updateButtonState(rightButton, true)
      updateOpacity("--right-opacity", "0")
    } else {
      updateButtonState(rightButton, false)
      updateOpacity("--right-opacity", "1")
    }

    if (carousel.scrollLeft > tolerance) {
      updateOpacity("--left-opacity", "1")
    } else {
      updateOpacity("--left-opacity", "0")
    }
  })
</script>